---
- hosts:
    - 127.0.0.1
  gather_facts: true
  become: true
  vars:
    boards:
      - {
          kernel: "6.1.21-v7+",
          name: "PiZero2W",
          firmware: "brcmfmac43436-sdio.bin",
          patch: "bcm43436b0/9_88_4_65",
          cpu: any, #cortex-a53
          arch_flags: "-arch armv7l"
        }
    kernel:
      min: "6.6"
      full: "6.6.28+rpt-rpi-v8"
      full_2w: "6.1.21-v7+"
      full_4b: "6.1.21-v7l+"
      full_pi5: "6.6.28+rpt-rpi-2712"
    pwnagotchi:
      hostname: "{{ lookup('env', 'PWN_HOSTNAME') | default('pwnagotchi', true) }}"
      version: "{{ lookup('env', 'PWN_VERSION') | default('main', true) }}"
    services:
      enable:
        - bettercap.service
        - fstrim.timer
        - pwnagotchi.service
        - pwngrid-peer.service
      disable:
        - apt-daily-upgrade.service
        - apt-daily-upgrade.timer
        - apt-daily.service
        - apt-daily.timer
        - bluetooth.service
        - ifup@wlan0.service
        - wpa_supplicant.service
    packages:
      pwngrid:
        source: "https://github.com/jayofelony/pwngrid.git"
      bettercap:
        source: "https://github.com/jayofelony/bettercap.git"
        ui: "https://github.com/bettercap/ui/releases/download/v1.3.0/ui.zip"
      caplets:
        source: "https://github.com/jayofelony/caplets.git"
      libisl:
        source: "https://libisl.sourceforge.io/isl-0.26.tar.gz"
      apt:
        hold:
          - firmware-atheros
          - firmware-brcm80211
          - firmware-libertas
          - firmware-misc-nonfree
          - firmware-realtek
        remove:
          - dhpys-swapfile
          - nfs-common
          - triggerhappy
          - wpasupplicant
        install:
          - autoconf
          - bc
          - bison
          - build-essential
          - dphys-swapfile
          - fbi
          - firmware-atheros
          - firmware-brcm80211
          - firmware-libertas
          - firmware-misc-nonfree
          - firmware-realtek
          - flex
          - fonts-dejavu
          - fonts-dejavu-core
          - fonts-dejavu-extra
          - fonts-freefont-ttf
          - fonts-ipaexfont-gothic
          - g++
          - gawk
          - gcc-arm-linux-gnueabihf
          - gcc-arm-none-eabi
          - git
          - golang
          - libatlas-base-dev
          - libavcodec59
          - libavformat59
          - libbluetooth-dev
          - libbz2-dev
          - libc6-dev
          - libc6-armhf-cross
          - libcap-dev
          - libcurl-ocaml-dev
          - libelf-dev
          - libffi-dev
          - libfl-dev
          - libfuse-dev
          - libgdbm-dev
          - libgmp3-dev
          - libgstreamer1.0-0
          - libhdf5-dev
          - libncursesw5-dev
          - libnetfilter-queue-dev
          - libopenjp2-7
          - libopenmpi-dev
          - libopenmpi3
          - libpcap-dev
          - libraspberrypi-bin
          - libraspberrypi-dev
          - libraspberrypi-doc
          - libraspberrypi0
          - libsqlite3-dev
          - libssl-dev
          - libssl-ocaml-dev
          - libswscale5
          - libtiff6
          - libtool
          - libusb-1.0-0-dev
          - lsof
          - make
          - ntp
          - python3-dev
          - python3-dbus
          - python3-flask
          - python3-flask-cors
          - python3-flaskext.wtf
          - python3-gast
          - python3-pil
          - python3-pip
          - python3-pycryptodome
          - python3-requests
          - python3-scapy
          - python3-setuptools
          - python3-smbus
          - python3-smbus2
          - python3-spidev
          - python3-tweepy
          - python3-werkzeug
          - python3-yaml
          - qpdf
          - raspberrypi-kernel-headers
          - rsync
          - screen
          - tcpdump
          - texinfo
          - unzip
          - vim
          - wget
          - xxd
          - zlib1g-dev
          - libisl23:armhf
          - libmpfr6:armhf
          - libmpc3:armhf
          - libstdc++6:armhf
    libraries:
      - ld-linux-armhf.so.3
      - libc.so.6
      - libm.so.6

  tasks:
    ###########################################
    # Update repositories and install packages
    ###########################################
    - name: update apt package cache
      apt:
        update_cache: yes

    - name: upgrade apt distro
      apt:
        upgrade: full

    - name: install packages
      apt:
        name: "{{ packages.apt.install }}"
        state: present
        update_cache: yes
        install_recommends: false

    - name: install python packages
      command: "python -m pip install --upgrade pip setuptools wheel meson h5py --break-system-packages"

    - name: create symlinks for libraries
      file:
        src: "/usr/arm-linux-gnueabihf/lib/{{ item }}"
        dest: "/usr/lib/{{ item }}"
        state: link
      with_items: "{{ libraries }}"

    - name: create symlink for /usr/lib/ld-linux-armhf.so.3
      file:
        src: "/usr/arm-linux-gnueabihf/lib/ld-linux-armhf.so.3"
        dest: "/usr/lib/ld-linux-armhf.so.3"
        state: link

    - name: create symlink for /usr/lib/arm-linux-gnueabihf/libisl.so.10
      file:
        src: "/usr/lib/arm-linux-gnueabihf/libisl.so.23.2.0"
        dest: "/usr/lib/arm-linux-gnueabihf/libisl.so.10"
        state: link

    - name: create symlink for /usr/lib/arm-linux-gnueabihf/libmpfr.so.4
      file:
        src: "/usr/lib/arm-linux-gnueabihf/libmpfr.so.6.2.0"
        dest: "/usr/lib/arm-linux-gnueabihf/libmpfr.so.4"
        state: link

    ###########################################
    # Set up host
    ###########################################
    - name: Install go-1.21
      unarchive:
        src: https://go.dev/dl/go1.21.5.linux-arm64.tar.gz
        dest: /usr/local
        remote_src: yes
      register: golang

    - name: Update .bashrc for go-1.21
      blockinfile:
        dest: /etc/profile
        state: present
        block: |
          export GOPATH=$HOME/go
          export PATH=/usr/local/go/bin:$PATH:$GOPATH/bin
      when: golang.changed

    - name: enable ssh on boot
      file:
        path: /boot/firmware/ssh
        state: touch

    - name: remove current rc.local
      file:
        path: /etc/rc.local
        state: absent

    - name: configure /boot/firmware/cmdline.txt
      lineinfile:
        path: /boot/firmware/cmdline.txt
        backrefs: True
        state: present
        backup: no
        regexp: '(.*)$'
        line: '\1 modules-load=dwc2,g_ether'

    - name: setup /boot/firmware/config.txt
      blockinfile:
        path: /boot/firmware/config.txt
        insertafter: EOF
        block: |
          dtparam=i2c1=on
          dtparam=i2c_arm=on
          dtparam=spi=on
          gpu_mem=1
          dtoverlay=dwc2
          #dtoverlay=disable-wifi

          [pi0]
          dtoverlay=spi0-0cs
          #dtoverlay=disable-wifi

          [pi3]
          dtoverlay=spi0-0cs
          #dtoverlay=disable-wifi

          [pi4]
          dtoverlay=spi0-0cs
          #dtoverlay=disable-wifi

          [pi5]
          dtoverlay=spi0-0cs
          #dtoverlay=disable-wifi

    - name: change hostname
      lineinfile:
        dest: /etc/hostname
        regexp: '^raspberrypi'
        line: "{{pwnagotchi.hostname}}"
        state: present
      when: lookup('file', '/etc/hostname') == "raspberrypi"
      register: hostname

    - name: add hostname to /etc/hosts
      lineinfile:
        dest: /etc/hosts
        regexp: '^127\.0\.1\.1[ \t]+raspberrypi'
        line: "127.0.1.1\t{{pwnagotchi.hostname}}"
        state: present
      when: hostname.changed

    # Now we disable sap and a2dp, we don't use them on rpi
    - name: disable sap plugin for bluetooth.service
      lineinfile:
        dest: /lib/systemd/system/bluetooth.service
        regexp: '^ExecStart=/usr/libexec/bluetooth/bluetoothd$'
        line: 'ExecStart=/usr/libexec/bluetooth/bluetoothd --noplugin=sap,a2dp'
        state: present

    ###########################################
    # libpcap - build from source
    ###########################################
    # install libpcap before bettercap and pwngrid, so they use it
    - name: clone libpcap v1.9 from github
      git:
        repo: 'https://github.com/the-tcpdump-group/libpcap.git'
        dest: /usr/local/src/libpcap
        version: libpcap-1.9
        depth: 1

    - name: build and install libpcap into /usr/local/lib
      shell: "./configure && make && make install"
      args:
        executable: /bin/bash
        chdir: /usr/local/src/libpcap

    - name: remove libpcap build folder
      file:
        state: absent
        path: /usr/local/src/libpcap

    - name: create symlink /usr/local/lib/libpcap.so.1.9.1
      file:
        src: /usr/local/lib/libpcap.so.1.9.1
        dest: /usr/local/lib/libpcap.so.0.8
        state: link

    ###########################################
    # BUILD nexmon DRIVER
    ###########################################
    - name: make Nexmon firmware
      shell: "source ./setup_env.sh && make"
      args:
        executable: /bin/bash
        chdir: /usr/local/src/nexmon/
      environment:
        QEMU_UNAME: "{{ kernel.full_pi5 }}"
        ARCHFLAGS: "-arch aarch64"

    - name: make firmware patch (bcm43455c0), RPi5
      shell: "source ./setup_env.sh && cd /usr/local/src/nexmon/patches/bcm43455c0/7_45_206/nexmon/ && make"
      args:
        executable: /bin/bash
        chdir: /usr/local/src/nexmon/
      environment:
        QEMU_UNAME: "{{ kernel.full_pi5 }}"
        ARCHFLAGS: "-arch aarch64"

    - name: copy modified driver, RPi5
      copy:
        src: "/usr/local/src/nexmon/patches/driver/brcmfmac_{{ kernel.min }}.y-nexmon/brcmfmac.ko"
        dest: "/usr/lib/modules/{{ kernel.full_pi5 }}/kernel/drivers/net/wireless/broadcom/brcm80211/brcmfmac/brcmfmac.ko"
      environment:
        QEMU_UNAME: "{{ kernel.full_pi5 }}"
        ARCHFLAGS: "-arch aarch64"

    - name: backup original driver, RPi5
      command: "mv /usr/lib/modules/{{ kernel.full_pi5 }}/kernel/drivers/net/wireless/broadcom/brcm80211/brcmfmac/brcmfmac.ko.xz /usr/lib/modules/{{ kernel.full_pi5 }}/kernel/drivers/net/wireless/broadcom/brcm80211/brcmfmac/brcmfmac.ko.xz.orig"

    - name: load brcmfmac drivers
      command: "/sbin/depmod {{ kernel.full_pi5 }}"
      environment:
        QEMU_UNAME: "{{ kernel.full_pi5 }}"

    - name: make firmware patch (bcm43455c0), RPi4
      shell: "source ./setup_env.sh && cd /usr/local/src/nexmon/patches/bcm43455c0/7_45_206/nexmon/ && make"
      args:
        executable: /bin/bash
        chdir: /usr/local/src/nexmon/
      environment:
        QEMU_UNAME: "{{ kernel.full }}"
        ARCHFLAGS: "-arch aarch64"

    - name: install new firmware (bcm43455c0), RPi4 RPi5
      copy:
        src: /usr/local/src/nexmon/patches/bcm43455c0/7_45_206/nexmon/brcmfmac43455-sdio.bin
        dest: /usr/lib/firmware/brcm/brcmfmac43455-sdio.bin
        follow: true

    - name: make firmware patch (bcm43436b0), PiZero2W
      shell: "source ./setup_env.sh && cd /usr/local/src/nexmon/patches/bcm43436b0/9_88_4_65/nexmon/ && make"
      args:
        executable: /bin/bash
        chdir: /usr/local/src/nexmon/
      environment:
        QEMU_UNAME: "{{ kernel.full }}"
        ARCHFLAGS: "-arch aarch64"

    - name: install new firmware (PiZero2W)
      copy:
        src: /usr/local/src/nexmon/patches/bcm43436b0/9_88_4_65/nexmon/brcmfmac43436-sdio.bin
        dest: /usr/lib/firmware/brcm/brcmfmac43436-sdio.bin
        follow: true

    - name: make firmware patch (bcm43430a1), RPi3
      shell: "source ./setup_env.sh && cd /usr/local/src/nexmon/patches/bcm43430a1/7_45_41_46/nexmon/ && make"
      args:
        executable: /bin/bash
        chdir: /usr/local/src/nexmon/
      environment:
        QEMU_UNAME: "{{ kernel.full }}"
        ARCHFLAGS: "-arch aarch64"

    - name: copy modified driver, RPi3
      copy:
        src: "/usr/local/src/nexmon/patches/driver/brcmfmac_{{ kernel.min }}.y-nexmon/brcmfmac.ko"
        dest: "/usr/lib/modules/{{ kernel.full }}/kernel/drivers/net/wireless/broadcom/brcm80211/brcmfmac/brcmfmac.ko"
      environment:
        QEMU_UNAME: "{{ kernel.full }}"
        ARCHFLAGS: "-arch aarch64"

    - name: install new firmware (bcm43430a1), RPi3
      copy:
        src: /usr/local/src/nexmon/patches/bcm43430a1/7_45_41_46/nexmon/brcmfmac43430-sdio.bin
        dest: /usr/lib/firmware/brcm/brcmfmac43430-sdio.bin
        follow: true

    - name: copy 43430-sdio as 43436s-sdio for the special 43430/1 /2
      command: "cp /usr/local/src/nexmon/patches/bcm43430a1/7_45_41_46/nexmon/brcmfmac43430-sdio.bin /usr/lib/firmware/brcm/brcmfmac43436s-sdio.bin"

    # delete blob files that make nexmon sad
    - name: Delete the firmware blob files to avoid some nexmon crashing
      file:
        state: absent
        path: '{{ item }}'
      loop:
        - /usr/lib/firmware/brcm/brcmfmac43430-sdio.clm_blob
        - /usr/lib/firmware/brcm/brcmfmac43430-sdio.raspberrypi,model-zero-w.clm_blob
        - /usr/lib/firmware/brcm/brcmfmac43430-sdio.raspberrypi,3-model-b.clm_blob
        - /usr/lib/firmware/brcm/brcmfmac43430b0-sdio.raspberrypi,model-zero-2-w.clm_blob
        - /usr/lib/firmware/brcm/brcmfmac43436-sdio.clm_blob
        - /usr/lib/firmware/brcm/brcmfmac43436-sdio.raspberrypi,model-zero-2-w.clm_blob
        - /usr/lib/firmware/brcm/brcmfmac43455-sdio.clm_blob

    - name: backup original driver
      command: "mv /usr/lib/modules/{{ kernel.full }}/kernel/drivers/net/wireless/broadcom/brcm80211/brcmfmac/brcmfmac.ko.xz /usr/lib/modules/{{ kernel.full }}/kernel/drivers/net/wireless/broadcom/brcm80211/brcmfmac/brcmfmac.ko.xz.orig"

    - name: load brcmfmac drivers
      command: "/sbin/depmod {{ kernel.full }}"
      environment:
        QEMU_UNAME: "{{ kernel.full }}"

    ## To shrink the final image, remove the nexmon directory (takes 2.5G of space) post build and installation
    - name: Delete nexmon content & directory
      file:
        state: absent
        path: /usr/local/src/nexmon/

    - name: Create custom plugin directory
      file:
        path: /usr/local/share/pwnagotchi/custom-plugins/
        state: directory

    - name: configure dphys-swapfile
      lineinfile:
        dest: /etc/dphys-swapfile
        state: absent
        insertafter: EOF
        line: "CONF_SWAPSIZE=4096"

    ###########################################
    # Clone external repositories
    ###########################################
    - name: collect python pip package list
      command: "pip3 list"
      register: pip_output

    - name: set python pip package facts
      set_fact:
        pip_packages: >
          {{ pip_packages | default({}) | combine( { item.split()[0]: item.split()[1] } ) }}
      with_items: "{{ pip_output.stdout_lines }}"

    - name: acquire python3 pip target
      command: "python -c 'import sys;print(sys.path.pop())'"
      register: pip_target

    - name: Create custom config directory
      file:
        path: /etc/pwnagotchi/conf.d/
        state: directory

    ###########################################
    # Set up pwnagotchi
    ###########################################
    - name: create /usr/local/src/pwnagotchi/ folder
      file:
        path: /usr/local/src/pwnagotchi/
        state: directory

    - name: clone pwnagotchi repository
      git:
        repo: https://github.com/emonkey/pwnagotchi.git
        dest: /usr/local/src/pwnagotchi
        version: update-python-libs
        single_branch: yes
        depth: 1
      register: pwnagotchigit

    ## fix for error: THESE PACKAGES DO NOT MATCH THE HASHES FROM THE REQUIREMENTS FILE
    - name: remove pip cache
      file:
        state: absent
        path: /root/.cache/pip

    - name: build pwnagotchi wheel
      command: "pip install . --no-cache-dir --break-system-packages"
      args:
        chdir: /usr/local/src/pwnagotchi
      when: (pwnagotchigit.changed) or (pip_packages['pwnagotchi'] is undefined) or (pip_packages['pwnagotchi'] != pwnagotchi_version)

    - name: create /usr/local/share/pwnagotchi/ folder
      file:
        path: /usr/local/share/pwnagotchi/
        state: directory

    - name: clone pwnagotchi plugins repository
      git:
        repo: https://github.com/evilsocket/pwnagotchi-plugins-contrib.git
        dest: /usr/local/share/pwnagotchi/availaible-plugins
        depth: 1

    - name: fetch pwnagotchi version
      set_fact:
        pwnagotchi_version: "{{ lookup('file', '/usr/local/src/pwnagotchi/pwnagotchi/_version.py') | regex_replace('.*__version__.*=.*''([0-9]+\\.[0-9]+\\.[0-9]+[A-Za-z0-9]*)''.*', '\\1') }}"

    - name: pwnagotchi version found
      debug:
        msg: "{{ pwnagotchi_version }}"

    - name: build pwnagotchi wheel
      command: "python setup.py sdist bdist_wheel"
      args:
        chdir: /usr/local/src/pwnagotchi
      when: (pwnagotchigit.changed) or (pip_packages['pwnagotchi'] is undefined) or (pip_packages['pwnagotchi'] != pwnagotchi_version)

    - name: install opencv-python
      pip:
        name: opencv-python
        extra_args: "--no-deps --no-cache-dir --only-binary=:all: --target={{ pip_target.stdout }}"
      when: (pip_packages['opencv-python'] is undefined) or (pip_packages['opencv-python'] != '4.7.0.72')

    - name: install tensorflow
      pip:
        name: tensorflow-aarch64
        extra_args: "--no-deps --no-cache-dir --only-binary=:all: --target={{ pip_target.stdout }}"
      when: (pip_packages['tensorflow'] is undefined)

    - name: install pwnagotchi wheel and dependencies
      pip:
        name: "{{ lookup('fileglob', '/usr/local/src/pwnagotchi/dist/pwnagotchi*.whl') }}"
        extra_args: "--no-cache-dir --break-system-packages"
      when: (pwnagotchigit.changed) or (pip_packages['pwnagotchi'] is undefined) or (pip_packages['pwnagotchi'] != pwnagotchi_version)

    ###########################################
    # Set up plugins and extras
    ###########################################
    - name: download pwngrid source
      git:
        repo: "{{ packages.pwngrid.source }}"
        dest: /usr/local/src/pwngrid

    - name: install pwngrid from source
      shell: "export GOPATH=$HOME/go && export PATH=/usr/local/go/bin:$PATH:$GOPATH/bin && go mod tidy && make && make install"
      args:
        executable: /bin/bash
        chdir: /usr/local/src/pwngrid

    - name: remove pwngrid folder
      file:
        state: absent
        path: /usr/local/src/pwngrid

    - name: download bettercap source
      git:
        repo: "{{ packages.bettercap.source }}"
        dest: /usr/local/src/bettercap

    - name: install bettercap from source
      shell: "export GOPATH=$HOME/go && export PATH=/usr/local/go/bin:$PATH:$GOPATH/bin && go mod tidy && make && make install"
      args:
        executable: /bin/bash
        chdir: /usr/local/src/bettercap

    - name: remove bettercap folder
      file:
        state: absent
        path: /usr/local/src/bettercap

    - name: clone bettercap caplets
      git:
        repo: "{{ packages.caplets.source }}"
        dest: /tmp/caplets
      register: capletsgit

    - name: install bettercap caplets
      make:
        chdir: /tmp/caplets
        target: install
      when: capletsgit.changed

    - name: download and install bettercap ui
      unarchive:
        src: "{{ packages.bettercap.ui }}"
        dest: /usr/local/share/bettercap/
        remote_src: yes
        mode: 0755

    # to always have the bettercap webui available (because why not?)
    - name: copy pwnagotchi-manual over pwnagotchi-auto caplet
      ansible.builtin.copy:
        src: /usr/local/share/bettercap/caplets/pwnagotchi-manual.cap
        dest: /usr/local/share/bettercap/caplets/pwnagotchi-auto.cap
        force: true
      ignore_errors: true

    - name: create /etc/pwnagotchi folder
      file:
        path: /etc/pwnagotchi
        state: directory

    - name: check if user configuration exists
      stat:
        path: /etc/pwnagotchi/config.toml
      register: user_config

    - name: create /etc/pwnagotchi/config.toml
      copy:
        dest: /etc/pwnagotchi/config.toml
        content: |
          # Add your configuration overrides on this file any configuration changes done to default.toml will be lost!
          # Example:
          # ui.display.enabled = true
          # ui.display.type = "waveshare_4"
      when: not user_config.stat.exists

    - name: configure motd
      copy:
        dest: /etc/motd
        content: |
          (◕‿‿◕) {{pwnagotchi.hostname}}

          Hi! I'm a pwnagotchi, please take good care of me!
          Here are some basic things you need to know to raise me properly!

          If you want to change my configuration, use /etc/pwnagotchi/config.toml

          All the configuration options can be found on /etc/pwnagotchi/default.toml,
          but don't change this file because I will recreate it every time I'm restarted!

          I'm managed by systemd. Here are some basic commands.

          If you want to know what I'm doing, you can check my logs with the command
          tail -f /var/log/pwnagotchi.log

          If you want to know if I'm running, you can use
          systemctl status pwnagotchi

          You can restart me using
          systemctl restart pwnagotchi

          But be aware I will go into MANUAL mode when restarted!
          You can put me back into AUTO mode using
          touch /root/.pwnagotchi-auto && systemctl restart pwnagotchi

          You learn more about me at https://pwnagotchi.ai/
      when: hostname.changed

    ###########################################
    # Cleanup
    ###########################################
    - name: remove dependencies that are no longer required
      apt:
        autoremove: yes

    - name: add firmware packages to hold
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      with_items: "{{ packages.apt.hold }}"

    - name: disable unnecessary services
      systemd:
        name: "{{ item }}"
        state: stopped
        enabled: no
      with_items: "{{ services.disable }}"

    - name: enable services
      systemd:
        name: "{{ item }}"
        enabled: true
        state: stopped
      with_items: "{{ services.enable }}"
      register: enabled

    - name: make /root readable, becauase that's where all the files are
      file:
        path: /root
        mode: '755'

    - name: fix permissions on /home/pi
      file:
        path: /home/pi
        owner: pi
        group: pi
        recurse: true

    - name: remove pre-collected packages zip
      file:
        path: /root/go_pkgs.tgz
        state: absent

    - name: remove /root/go folder
      file:
        state: absent
        path: /root/go

    - name: remove /usr/local/go folder
      file:
        state: absent
        path: /usr/local/go

    - name: remove pip cache
      file:
        state: absent
        path: /root/.cache/pip

    - name: remove ssh keys
      file:
        state: absent
        path: "{{ item }}"
      with_fileglob:
        - "/etc/ssh/ssh_host*_key*"

    - name: regenerate ssh keys
      shell: "dpkg-reconfigure openssh-server"
      args:
        executable: /bin/bash

    # Now we remove packages
    - name: remove unnecessary apt packages
      apt:
        name: "{{ packages.apt.remove }}"
        state: absent
        purge: yes
      register: removed

    - name: remove dependencies that are no longer required
      apt:
        autoremove: yes
      when: removed.changed

    - name: clean apt cache
      apt:
        autoclean: true
      when: removed.changed

  handlers:
    - name: reload systemd services
      systemd:
        daemon_reload: yes
      when: enabled.changed
